basePath: /api/v1
definitions:
  model.FoundPost:
    properties:
      found_id:
        type: string
      id:
        type: integer
    type: object
  model.Login:
    properties:
      password:
        example: password
        type: string
      username:
        example: john_doe
        type: string
    type: object
  model.Notification:
    properties:
      create_at:
        type: string
      id:
        type: integer
      message:
        type: string
      owner_id:
        type: string
    type: object
  model.Post:
    properties:
      content:
        type: string
      found_id:
        type: string
      id:
        type: integer
      owner_id:
        type: string
      picture:
        items:
          type: integer
        type: array
      reward:
        type: number
      status:
        type: string
      title:
        type: string
    type: object
  model.Signup:
    properties:
      password:
        example: password
        type: string
      role:
        example: ""
        type: string
      username:
        example: john_doe
        type: string
    type: object
  model.User:
    properties:
      id:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API documentation for the SDA My Fluffy API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: SDA My Fluffy API
  version: "1.0"
paths:
  /notifications:
    get:
      description: Get all notifications for current user
      produces:
      - application/json
      responses:
        "200":
          description: List of notifications
          schema:
            items:
              $ref: '#/definitions/model.Notification'
            type: array
      summary: Get all notifications
      tags:
      - notifications
  /notifications/{id}:
    delete:
      description: Delete a notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notification deleted
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Delete a notification
      tags:
      - notifications
  /posts:
    post:
      consumes:
      - multipart/form-data
      description: Create a new post
      parameters:
      - description: Post title
        in: formData
        name: title
        required: true
        type: string
      - description: Post content
        in: formData
        name: content
        required: true
        type: string
      - description: Post picture
        in: formData
        name: file
        required: true
        type: file
      - description: Post reward
        in: formData
        name: reward
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post created successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Create a new post
      tags:
      - posts
  /posts/feed:
    get:
      consumes:
      - application/json
      description: Get paginated posts for the feed, 10 at a time
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated posts
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get paginated posts
      tags:
      - posts
  /posts/found:
    put:
      consumes:
      - application/json
      description: Found pet
      parameters:
      - description: Post ID
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/model.FoundPost'
      produces:
      - application/json
      responses:
        "200":
          description: Pet found
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Found pet
      tags:
      - posts
  /posts/user:
    get:
      consumes:
      - application/json
      description: Get posts from specific user
      produces:
      - application/json
      responses:
        "200":
          description: Posts from specific user
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get posts from specific user
      tags:
      - posts
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Signup information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.Signup'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/all:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Get all users
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Login
      tags:
      - users
swagger: "2.0"
